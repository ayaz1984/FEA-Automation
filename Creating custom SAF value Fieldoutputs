""""
Created on Thurs Mar 15 2018
@author: ShaikaAB
"""
#THIS SCRIPT IS USED TO CREATE "SAF FIELD OUTPUT REQUESTS" FOR 20%, 40%, 60%, 80% AND 100% TENSION LOAD CASE WITH NO NOMINAL/MINIMAL PRE-LOAD FOR A MARINE RISER JOINT
#THE SCRIPT WILL PROMPT FOR OUTER DIAMETER(OD), INNER DIAMETER(ID) AND RATED TENSION(LBF) AND THE STEP NAME OF THE TENSION APPLIED. ENTER THE EXACT STEP NAME(CASE-SENSITIVE)
#OPEN THE ODB NOT READ-ONLY(UNCHECK READ-ONLY) WHICH YOU WANT TO ADD THE SAF FIELDOUTPUTS TO
#NO NEED TO SET THE WORKING DIRECTORY IN ABAQUS
from abaqus import *
from odbAccess import *
from abaqusConstants import *
from textRepr import *
from datetime import datetime
start_time=datetime.now()
import visualization
myodb=session.viewports[session.currentViewportName].displayedObject
showStopButtonInGui
fields=(('OD:','0'),('ID:','0'),('Tension:','0')) # Enter OD, ID and Rated tension values
n1=getInputs(fields=fields,label='Enter OD, ID of the pipe and the rated Tension',dialogTitle='Area of the Pipe and Rated Tension',)
n1=[float(i) for i in n1]
area= round(float((pi/4)*(pow(n1[0],2)-pow(n1[1],2))),3)
print ('Area of the pipe is:', area)
ref_stress=round((n1[2]/area),3)
print ('Reference stress in pipe is:', ref_stress)
n=str(getInput("Enter the Tension step name")) # Enter Tension step
tension_step=myodb.steps[n]
total_frames = range(len(tension_step.frames))
SAF_list=[0.2,0.4,0.6,0.8,1.0] # SAF's required for percentage of rated of tension according to API 16F
#print("test")
for i in range(len(SAF_list)):
	new_step=myodb.Step(name='SAF_'+str(SAF_list[i]*100)+' percent tension',description='SAF results',domain=TIME, timePeriod=1)
	for j in total_frames:
		#print SAF_list[i],round(tension_step.frames[j].frameValue,2)
		if SAF_list[i] == round(tension_step.frames[j].frameValue,2):
			print (SAF_list[i],round(tension_step.frames[j].frameValue,2))
			k=SAF_list[i]
			#print(k)
			if SAF_list[i]==1.0:
				stress1=tension_step.frames[j-1].fieldOutputs['S'].getScalarField(invariant=MAX_PRINCIPAL)
				stress2=tension_step.frames[j].fieldOutputs['S'].getScalarField(invariant=MAX_PRINCIPAL)
				slope_stress1= (stress2-stress1)/(k-(k-0.05))
				SAF=slope_stress1/ref_stress
				newFrame=new_step.Frame(incrementNumber=i, frameValue=i, description='SAF Value for '+str(SAF_list[i]*100)+' percent tension')
				newFrame.FieldOutput(field=SAF,name='SAF')
			else:
				stress1=tension_step.frames[j-1].fieldOutputs['S'].getScalarField(invariant=MAX_PRINCIPAL)
				stress2=tension_step.frames[j].fieldOutputs['S'].getScalarField(invariant=MAX_PRINCIPAL)
				stress3=tension_step.frames[j+1].fieldOutputs['S'].getScalarField(invariant=MAX_PRINCIPAL)
				slope_stress1= (stress2-stress1)/(k-(k-0.05))
				slope_stress2= (stress3-stress2)/((k+0.05)-k)
				slope_stress_avg=(slope_stress1+slope_stress2)/2
				SAF=slope_stress_avg/ref_stress
				newFrame=new_step.Frame(incrementNumber=i, frameValue=i, description='SAF Value for '+str(SAF_list[i]*100)+' percent tension')
				newFrame.FieldOutput(field=SAF,name='SAF')
myodb.save()
myodb.close()
end_time=datetime.now()	
print('Duration:{}'.format(end_time-start_time))
